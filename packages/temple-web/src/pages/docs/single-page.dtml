<link rel="import" type="template" href="@/components/html/head.tml" name="html-head" />
<link rel="import" type="template" href="@/components/html/header.tml" name="html-header" />
<link rel="import" type="template" href="@/components/html/aside.tml" name="html-aside" />
<link rel="import" type="component" href="@ossph/temple-ui/layout/panel.tml" name="panel-layout" />
<link rel="import" type="component" href="@ossph/temple-ui/element/tab.tml" name="element-tab" />
<link rel="import" type="component" href="@ossph/temple-ui/element/icon.tml" name="element-icon" />
<link rel="import" type="component" href="@/components/api/docs.tml" name="api-docs" />
<link rel="import" type="component" href="@/components/ide/app/head.tml" name="app-head" />
<link rel="import" type="component" href="@/components/ide/app/left.tml" name="app-left" />
<link rel="import" type="component" href="@/components/ide/app/main.tml" name="app-main" />
<link rel="import" type="component" href="@/components/ide/app.tml" name="ide-app" />
<link rel="import" type="component" href="@/components/ide/code.tml" name="ide-code" />
<link rel="import" type="component" href="@/components/i18n/translate.tml" name="i18n-translate" />
<style>
  @temple theme;
  @temple reset;
  @temple fouc-opacity;
  @temple utilities;
</style>
<script>
  import { env } from '@ossph/temple';
  import { _ } from '@/components/i18n';

  const url = '/docs/single-page.html';
  const title = _('Single Page App - Temple reactive web component template engine.');
  const description = _('How to use Temple to develop single page apps.');
  const toggle = () => {
    document.getElementsByTagName('panel-layout')[0].toggle('left');
  };

  // Configuration for Theme 
    const themeMap = {
        // Light Theme
        dark: { nextTheme: 'light', options: { iconAdd: ['fa-moon', 'bg-black', 'tx-white'], iconRemove: ['fa-sun', 'bg-white', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: ['tx-white'], terminalRemove: ['tx-black'] }},
        // Light-Violet Theme
        'dark-violet': { nextTheme: 'light-violet', options: { iconAdd: ['fa-moon', 'bg-h-8d52aa', 'tx-white'], iconRemove: ['fa-sun', 'bg-white', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Violet Theme
        'light-violet': { nextTheme: 'dark-violet', options: { iconAdd: ['fa-sun', 'bg-h-4c0e65', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-8d52aa'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Pink Theme
        'dark-pink': { nextTheme: 'light-pink', options: { iconAdd: ['fa-moon', 'bg-h-aa5275', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-43091d', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Pink Theme
        'light-pink': { nextTheme: 'dark-pink', options: { iconAdd: ['fa-sun', 'bg-h-43091d', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-aa5275'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Blue Theme
        'dark-blue': { nextTheme: 'light-blue', options: { iconAdd: ['fa-moon', 'bg-h-5290aa', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-03131d', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Blue Theme
        'light-blue': { nextTheme: 'dark-blue', options: { iconAdd: ['fa-sun', 'bg-h-03131d', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-5290aa'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Green Theme
        'dark-green': { nextTheme: 'light-green', options: { iconAdd: ['fa-moon', 'bg-h-84aa52', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-2b650e', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Green The,e
        'light-green': { nextTheme: 'dark-green', options: { iconAdd: ['fa-sun', 'bg-h-2b650e', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-84aa52'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Dark Theme
        light: { nextTheme: 'dark', options: { iconAdd: ['fa-sun', 'bg-white', 'tx-black'], iconRemove: ['fa-moon', 'bg-black', 'tx-white'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-black'], tweetBoxRemove: ['tx-white'], terminalAdd: ['tx-black'], terminalRemove: ['tx-white'] }}
    };

    // Helper function to toggle classes
    const toggleClasses = (element, addClasses, removeClasses) => {
        if (element) {
          element.classList.add(...addClasses);
          element.classList.remove(...removeClasses);
        }
    };
        

    // Apply the saved theme from localStorage
    const savedTheme = () => {
        const savedTheme = localStorage.getItem('theme');
        const icon = document.getElementById('modeIcon');
        const tweetBoxes = document.querySelectorAll('tweet-box');
        const textLinks = document.querySelectorAll('a');
        const terminals = document.querySelectorAll('ide-code');

        
        if (savedTheme) {
          // Reset all theme classes on the body
          const themeClasses = [
            'dark', 'light', 
            'dark-violet', 'light-violet', 'dark-pink', 'light-pink', 
            'dark-blue', 'light-blue', 'dark-green', 'light-green'
          ];
          themeClasses.forEach(themeClass => document.body.classList.remove(themeClass));
          // Apply the saved theme to the body
          document.body.classList.add(savedTheme);

          // Apply classes based on the saved theme
          if (savedTheme === 'dark-violet') {
            toggleClasses(icon, ['bg-h-8d52aa', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-violet') {
            toggleClasses(icon, ['fa-moon', 'bg-h-4c0e65', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-pink') { 
            toggleClasses(icon, ['bg-h-43091d', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-pink') {
            toggleClasses(icon, ['fa-moon', 'bg-h-aa5275', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-blue') { 
            toggleClasses(icon, ['bg-h-03131d', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-blue') {
            toggleClasses(icon, ['fa-moon', 'bg-h-5290aa', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-green') { 
            toggleClasses(icon, ['bg-h-2b650e', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-green') {
            toggleClasses(icon, ['fa-moon', 'bg-h-84aa52', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'light') {
            toggleClasses(icon, ['fa-moon', 'bg-black', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          }
        }
    };


    // General function to toggle theme modes
    const toggleTheme = (fromClass, toClass, iconConfig) => {
        const body = document.body;
        const icon = document.getElementById('modeIcon');
        const textA = document.querySelectorAll('a');
        const tweetBoxes = document.querySelectorAll('tweet-box');
        const terminals = document.querySelectorAll('ide-code');

        body.classList.replace(fromClass, toClass);
        textA.forEach(link => toggleClasses(link, iconConfig.linkAdd, iconConfig.linkRemove));
        tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox, iconConfig.tweetBoxAdd, iconConfig.tweetBoxRemove));
        terminals.forEach(terminal => toggleClasses(terminal, iconConfig.terminalAdd, iconConfig.terminalRemove));
        toggleClasses(icon, iconConfig.iconAdd, iconConfig.iconRemove);
        localStorage.setItem('theme', toClass);
    };


    // Toggle Mode for Dark and Light Mode
    const toggleMode = () => {
        const body = document.body;
        const currentTheme = Object.keys(themeMap).find(theme => body.classList.contains(theme));
        if (currentTheme) {
          const { nextTheme, options } = themeMap[currentTheme];
          toggleTheme(currentTheme, nextTheme, options);
        }
    };


    // Toggle Violet Theme
    const toggleViolet = () => {
        const body = document.body;
        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa', 'tx-white'],  
            iconRemove: ['bg-white', 'tx-black'],  
            linkAdd: ['tx-white'],
            linkRemove: ['tx-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],  
            iconRemove: ['bg-black'],
            linkAdd: ['tx-black'],
            linkRemove: ['text-white'],
            tweetBoxAdd: ['tx-white'],
            tweetBoxRemove: ['tx-black'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-violet'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove:  ['bg-h-5290aa'],
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa', 'tx-white'],
            iconRemove: ['bg-h-2b650e', 'tx-black'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-violet', {
            iconAdd: ['bg-h-4c0e65', 'tx-white'],
            iconRemove: ['bg-h-84aa52', 'tx-black'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        }
    };
      
    // Toggle Pink Theme
    const togglePink = () => {
        const body = document.body;
        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-pink', {
            iconAdd: ['bg-h-43091d', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-pink'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-blue-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-blue-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-blue-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-5290aa'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-blue-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-blue-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-blue-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-2b650e'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-green-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-green-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-green-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-84aa52'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-green-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-green-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-green-light']
          });
        }
    };

    // Toggle Blue Theme
    const toggleBlue = () => {
        const body = document.body;

        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-blue', {
            iconAdd: ['bg-h-03131d', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-blue', {
            iconAdd: ['bg-h-5290aa', 'tx-white'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-8d52aa'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-2b650e'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-green-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-green-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-green-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-84aa52'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-green-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-green-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-green-light']
          });
        }
    };

    // Toggle Green Theme
    const toggleGreen = () => {
        const body = document.body;

        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-green', {
            iconAdd: ['bg-h-2b650e', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-green', {
            iconAdd: ['bg-h-84aa52', 'tx-white'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-blue-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-blue-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-blue-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-5290aa'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-blue-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-blue-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-blue-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-8d52aa'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        }
    };

    // Toggle Dark Theme
    const toggleDark = () => {
        const body = document.body;
        if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark', {
          iconAdd: ['bg-white', 'tx-black'],  
          iconRemove: ['bg-h-8d52aa', 'tx-white'],  
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light', {
            iconAdd: ['bg-black'], 
            iconRemove: ['bg-h-4c0e65'],  
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark', {
            iconAdd:  ['bg-white', 'tx-black'],
            iconRemove: ['bg-h-43091d', 'tx-white'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light', {
            iconAdd: ['bg-black'],
            iconRemove: ['bg-black']['bg-h-aa5275'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark', {
          iconAdd: ['bg-white', 'tx-black'] ,
            iconRemove: ['bg-h-03131d', 'tx-white'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light', {
            iconAdd: ['bg-black', 'tx-white'],
            iconRemove: ['bg-h-5290aa', 'tx-black'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark', {
            iconAdd: ['bg-white', 'tx-black'],
            iconRemove: ['bg-h-2b650e', 'tx-white'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light', {
            iconAdd: ['bg-black', 'tx-white'],
            iconRemove: ['bg-h-4c0e65', 'tx-black'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-light']
          });
        }
    };
  

    // Initialize the page with the saved theme on load
    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
      document.addEventListener('DOMContentLoaded', () => {
        savedTheme(); 
      });
    }










</script>
<html>
  <html-head />
  <body class="dark bg-t-0 tx-t-1 tx-arial">
    <panel-layout>
      <header><html-header /></header>
      <aside left><html-aside /></aside>
      <main>
        <api-docs>
          <h1 class="tx-primary tx-upper tx-30 py-20">
            {_('Single Page App')}
          </h1>

          <i18n-translate p trim class="tx-lh-36 py-20">
            A single page application (SPA) is a website or web 
            application that dynamically rewrites a current web page with 
            new data from a web server, instead of the default method of 
            a web browser loading entire new pages. Temple is capable of 
            creating reactive SPAs using Webpack and TypeScript.
          </i18n-translate>

          <i18n-translate p trim class="tx-lh-36 py-20">
            First install the following Temple packages.
          </i18n-translate>
          <ide-code lang="bash">
            npm install --save-dev @ossph/temple @ossph/temple-loader
          </ide-code>

          <i18n-translate p trim class="tx-lh-36 py-20">
            Then, install the following TypeScript packages.
          </i18n-translate>
          <ide-code lang="bash">
            npm install --save-dev @types/node ts-loader ts-node typescript
          </ide-code>

          <i18n-translate p trim class="tx-lh-36 py-20">
            Then, install the following Webpack packages.
          </i18n-translate>
          <ide-code lang="bash">
            npm install --save-dev html-webpack-plugin webpack-dev-server webpack webpack-cli
          </ide-code>

          <i18n-translate p trim class="tx-lh-36 py-20">
            Next create the following files and directories.
          </i18n-translate>

          <ide-app height={400} title="My Project">
            <app-head>
              <div class="flex scroll-x-auto pt-5 pl-5">
                <element-tab 
                  class="relative ml-2 p-10 ct-sm b-solid b-t-1 bx-1 bt-1 bb-0"
                  active="bg-black tx-white"
                  inactive="bg-t-1 tx-muted"  
                  group="project" 
                  selector="#client-ts"
                >
                  src/client.ts
                </element-tab>
                <element-tab 
                  class="relative ml-2 p-10 ct-sm b-solid b-t-1 bx-1 bt-1 bb-0"
                  active="bg-black tx-white"
                  inactive="bg-t-1 tx-muted"  
                  group="project" 
                  selector="#app-tml"
                >
                  src/app.tml
                </element-tab>
                <element-tab 
                  class="relative ml-2 p-10 ct-sm b-solid b-t-1 bx-1 bt-1 bb-0"
                  active="bg-black tx-white"
                  inactive="bg-t-1 tx-muted"   
                  group="project" 
                  selector="#index-html"
                >
                  index.html
                </element-tab>
                <element-tab 
                  on
                  class="relative ml-2 p-10 ct-sm b-solid b-t-1 bx-1 bt-1 bb-0"
                  active="bg-black tx-white"
                  inactive="bg-t-1 tx-muted"  
                  group="project" 
                  selector="#webpack-js"
                >
                  webpack.config.js
                </element-tab>
                <element-tab 
                  class="relative ml-2 p-10 ct-sm b-solid b-t-1 bx-1 bt-1 bb-0"
                  active="bg-black tx-white"
                  inactive="bg-t-1 tx-muted"  
                  group="project" 
                  selector="#tsconfig-json"
                >
                  tsconfig.json
                </element-tab>
                <element-tab 
                  class="relative ml-2 p-10 ct-sm b-solid b-t-1 bx-1 bt-1 bb-0"
                  active="bg-black tx-white"
                  inactive="bg-t-1 tx-muted"  
                  group="project" 
                  selector="#package-json"
                >
                  package.json
                </element-tab>
              </div>
            </app-head>
            <app-left>
              <h5 class="folder">
                <element-icon name="chevron-down" />
                <span>src</span>
              </h5>
              <element-tab 
                class="pl-15 pt-10 block" 
                active="tx-white"
                inactive="tx-muted"  
                group="project" 
                selector="#app-tml"
              >
                <element-icon name="file" />
                app.tml
              </element-tab>
              <element-tab 
                class="pl-15 pt-10 block" 
                active="tx-white"
                inactive="tx-muted"  
                group="project" 
                selector="#client-ts"
              >
                <element-icon name="file" />
                client.ts
              </element-tab>
              <element-tab 
                class="pt-10 block" 
                active="tx-white"
                inactive="tx-muted"  
                group="project" 
                selector="#index-html"
              >
                <element-icon name="file" />
                index.html
              </element-tab>
              <element-tab 
                class="pt-10 block" 
                active="tx-white"
                inactive="tx-muted"  
                group="project" 
                selector="#package-json"
              >
                <element-icon name="file" />
                package.json
              </element-tab>
              <element-tab 
                class="pt-10 block" 
                active="tx-white"
                inactive="tx-muted"  
                group="project" 
                selector="#tsconfig-json"
              >
                <element-icon name="file" />
                tsconfig.json
              </element-tab>
              <element-tab 
                on
                class="pt-10 block" 
                active="tx-white"
                inactive="tx-muted"  
                group="project" 
                selector="#webpack-js"
              >
                <element-icon name="file" />
                webpack.config.js
              </element-tab>
            </app-left>
            <app-main>
              <ide-code id="client-ts" style="display:none" lang="js" numbers trim detab={16}>{`
                import TempleComponent from './app.tml';

                TempleComponent.register();
              `}</ide-code>
              <ide-code id="app-tml" style="display:none" numbers trim detab={16}>{`
                <script>
                  const title = 'Single Page App';
                </script>
                <h1>{title}</h1>
              `}</ide-code>
              <ide-code id="index-html" style="display:none" numbers trim detab={16}>{`
                <!DOCTYPE html>
                <html>
                  <head>
                    <style>
                      body {
                        font-family: Arial, Helvetica, sans-serif;
                        margin: 0;
                        padding: 0;
                        width: 100vw;
                        height: 100vh;
                      }
                    </style>
                  </head>
                  <body>
                    <temple-app></temple-app>
                  </body>
                </html>
              `}</ide-code>
              <ide-code id="webpack-js" lang="js" numbers trim detab={16}>{`
                const path = require('path');
                const HtmlWebpackPlugin = require('html-webpack-plugin');

                module.exports = {
                  // https://webpack.js.org/concepts/entry-points/#multi-page-application
                  entry: {
                    index: './src/client.ts'
                  },
                  output: {
                    path: path.resolve(__dirname, './dist'),
                    filename: '[name].bundle.js',
                  },
                  module: {
                    rules: [
                      {
                        test: /\.tml$/,
                        use: {
                          loader: '@ossph/temple-loader',
                          options: { minify: false }
                        },
                        exclude: /node_modules/,
                      },
                      {
                        test: /\.ts$/,
                        use: 'ts-loader',
                        exclude: /node_modules/,
                      },
                    ],
                  },
                  resolve: {
                    extensions: ['.js', '.ts', '.tml'],
                  },
                  // https://webpack.js.org/configuration/dev-server/
                  devServer: {
                    port: 8080
                  },
                  plugins: [
                    new HtmlWebpackPlugin({
                      title: 'Temple',
                      template: "index.html",
                    })
                  ]
                };
              `}</ide-code>
              <ide-code id="tsconfig-json" style="display:none" lang="js" numbers trim detab={16}>{`
                {
                  "compilerOptions": {
                    "declaration": true,
                    "esModuleInterop": true,
                    "lib": [ "es2021", "es7", "es6", "dom" ],
                    "module": "commonjs",
                    "noUnusedLocals": true,
                    "outDir": "./dist/",
                    "preserveConstEnums": true,
                    "resolveJsonModule": true,
                    "removeComments": true,
                    "sourceMap": false,
                    "strict": true,
                    "target": "es6",
                    "skipLibCheck": true
                  },
                  "include": [ 
                    "src/**/*.ts", 
                    "@ossph/temple/types"
                  ],
                  "exclude": [ "dist", "node_modules" ]
                }
              `}</ide-code>
              <ide-code id="package-json" style="display:none" lang="js" numbers trim detab={16}>{`
                {
                  "name": "my-spa",
                  "version": "1.0.0",
                  "private": true,
                  "scripts": {
                    "dev": "webpack-dev-server --mode development",
                    "build": "webpack --mode production"
                  },
                  "devDependencies": {
                    "@ossph/temple": "0.1.7"
                    "@ossph/temple-loader": "0.1.7",
                    "@types/node": "22.1.0",
                    "html-webpack-plugin": "5.6.0",
                    "webpack-dev-server": "5.0.4",
                    "ts-loader": "9.5.1",
                    "ts-node": "10.9.2",
                    "typescript": "5.4.5",
                    "webpack": "5.91.0",
                    "webpack-cli": "5.1.4"
                  }
                }
              `}</ide-code>
            </app-main>
          </ide-app>
          <i18n-translate p trim class="tx-lh-36 py-20">
            To test the SPA and see the results, run the following command in terminal.
          </i18n-translate>
          <ide-app title="Terminal">
            <ide-code lang="bash">
              npm run dev
            </ide-code>
          </ide-app>
          
          <nav class="flex">
            <a class="tx-primary py-40" href="/temple/docs/template-engine.html">
              <element-icon name="chevron-left" theme="tx-1" />
              {_('Template Engine')}
            </a>
            <a class="flex-grow tx-right tx-primary py-40" href="/temple/docs/static-site.html">
              {_('Static Site Generator')}
              <element-icon name="chevron-right" theme="tx-1" />
            </a>
          </nav>
          <footer class="foot"></footer>
        </api-docs>
      </main>
    </panel-layout>
  </body>
</html>