<link rel="import" type="template" href="@/components/html/head.tml" name="html-head" />
<link rel="import" type="template" href="@/components/html/header.tml" name="html-header" />
<link rel="import" type="template" href="@/components/html/aside.tml" name="html-aside" />
<link rel="import" type="component" href="@ossph/temple-ui/layout/panel.tml" name="panel-layout" />
<link rel="import" type="component" href="@ossph/temple-ui/element/alert.tml" name="element-alert" />
<link rel="import" type="component" href="@ossph/temple-ui/element/icon.tml" name="element-icon" />
<link rel="import" type="component" href="@/components/api/docs.tml" name="api-docs" />
<link rel="import" type="component" href="@/components/api/ui.tml" name="api-ui" />
<link rel="import" type="component" href="@/components/ide/app.tml" name="ide-app" />
<link rel="import" type="component" href="@/components/ide/code.tml" name="ide-code" />
<link rel="import" type="component" href="@/components/i18n/translate.tml" name="i18n-translate" />
<style>
  @temple theme;
  @temple reset;
  @temple fouc-opacity;
  @temple utilities;
  .col-2 {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
</style>
<script>
  import { env } from '@ossph/temple';
  import { _ } from '@/components/i18n';

  const url = '/docs/state-management.html';
  const title = _('State Management - Temple reactive web component template engine.');
  const description = _('Learn how to manage states in Temple.');
  const toggle = () => {
    document.getElementsByTagName('panel-layout')[0].toggle('left');
  };

  // Configuration for Theme 
    const themeMap = {
        // Light Theme
        dark: { nextTheme: 'light', options: { iconAdd: ['fa-moon', 'bg-black', 'tx-white'], iconRemove: ['fa-sun', 'bg-white', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: ['tx-white'], terminalRemove: ['tx-black'] }},
        // Light-Violet Theme
        'dark-violet': { nextTheme: 'light-violet', options: { iconAdd: ['fa-moon', 'bg-h-8d52aa', 'tx-white'], iconRemove: ['fa-sun', 'bg-white', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Violet Theme
        'light-violet': { nextTheme: 'dark-violet', options: { iconAdd: ['fa-sun', 'bg-h-4c0e65', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-8d52aa'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Pink Theme
        'dark-pink': { nextTheme: 'light-pink', options: { iconAdd: ['fa-moon', 'bg-h-aa5275', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-43091d', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Pink Theme
        'light-pink': { nextTheme: 'dark-pink', options: { iconAdd: ['fa-sun', 'bg-h-43091d', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-aa5275'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Blue Theme
        'dark-blue': { nextTheme: 'light-blue', options: { iconAdd: ['fa-moon', 'bg-h-5290aa', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-03131d', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Blue Theme
        'light-blue': { nextTheme: 'dark-blue', options: { iconAdd: ['fa-sun', 'bg-h-03131d', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-5290aa'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Green Theme
        'dark-green': { nextTheme: 'light-green', options: { iconAdd: ['fa-moon', 'bg-h-84aa52', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-2b650e', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Green The,e
        'light-green': { nextTheme: 'dark-green', options: { iconAdd: ['fa-sun', 'bg-h-2b650e', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-84aa52'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Dark Theme
        light: { nextTheme: 'dark', options: { iconAdd: ['fa-sun', 'bg-white', 'tx-black'], iconRemove: ['fa-moon', 'bg-black', 'tx-white'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-black'], tweetBoxRemove: ['tx-white'], terminalAdd: ['tx-black'], terminalRemove: ['tx-white'] }}
    };

    // Helper function to toggle classes
    const toggleClasses = (element, addClasses, removeClasses) => {
        if (element) {
          element.classList.add(...addClasses);
          element.classList.remove(...removeClasses);
        }
    };
        

    // Apply the saved theme from localStorage
    const savedTheme = () => {
        const savedTheme = localStorage.getItem('theme');
        const icon = document.getElementById('modeIcon');
        const tweetBoxes = document.querySelectorAll('tweet-box');
        const textLinks = document.querySelectorAll('a');
        const terminals = document.querySelectorAll('ide-code');

        
        if (savedTheme) {
          // Reset all theme classes on the body
          const themeClasses = [
            'dark', 'light', 
            'dark-violet', 'light-violet', 'dark-pink', 'light-pink', 
            'dark-blue', 'light-blue', 'dark-green', 'light-green'
          ];
          themeClasses.forEach(themeClass => document.body.classList.remove(themeClass));
          // Apply the saved theme to the body
          document.body.classList.add(savedTheme);

          // Apply classes based on the saved theme
          if (savedTheme === 'dark-violet') {
            toggleClasses(icon, ['bg-h-8d52aa', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-violet') {
            toggleClasses(icon, ['fa-moon', 'bg-h-4c0e65', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-pink') { 
            toggleClasses(icon, ['bg-h-43091d', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-pink') {
            toggleClasses(icon, ['fa-moon', 'bg-h-aa5275', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-blue') { 
            toggleClasses(icon, ['bg-h-03131d', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-blue') {
            toggleClasses(icon, ['fa-moon', 'bg-h-5290aa', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-green') { 
            toggleClasses(icon, ['bg-h-2b650e', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-green') {
            toggleClasses(icon, ['fa-moon', 'bg-h-84aa52', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'light') {
            toggleClasses(icon, ['fa-moon', 'bg-black', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          }
        }
    };


    // General function to toggle theme modes
    const toggleTheme = (fromClass, toClass, iconConfig) => {
        const body = document.body;
        const icon = document.getElementById('modeIcon');
        const textA = document.querySelectorAll('a');
        const tweetBoxes = document.querySelectorAll('tweet-box');
        const terminals = document.querySelectorAll('ide-code');

        body.classList.replace(fromClass, toClass);
        textA.forEach(link => toggleClasses(link, iconConfig.linkAdd, iconConfig.linkRemove));
        tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox, iconConfig.tweetBoxAdd, iconConfig.tweetBoxRemove));
        terminals.forEach(terminal => toggleClasses(terminal, iconConfig.terminalAdd, iconConfig.terminalRemove));
        toggleClasses(icon, iconConfig.iconAdd, iconConfig.iconRemove);
        localStorage.setItem('theme', toClass);
    };


    // Toggle Mode for Dark and Light Mode
    const toggleMode = () => {
        const body = document.body;
        const currentTheme = Object.keys(themeMap).find(theme => body.classList.contains(theme));
        if (currentTheme) {
          const { nextTheme, options } = themeMap[currentTheme];
          toggleTheme(currentTheme, nextTheme, options);
        }
    };


    // Toggle Violet Theme
    const toggleViolet = () => {
        const body = document.body;
        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa', 'tx-white'],  
            iconRemove: ['bg-white', 'tx-black'],  
            linkAdd: ['tx-white'],
            linkRemove: ['tx-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],  
            iconRemove: ['bg-black'],
            linkAdd: ['tx-black'],
            linkRemove: ['text-white'],
            tweetBoxAdd: ['tx-white'],
            tweetBoxRemove: ['tx-black'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-violet'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove:  ['bg-h-5290aa'],
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa', 'tx-white'],
            iconRemove: ['bg-h-2b650e', 'tx-black'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-violet', {
            iconAdd: ['bg-h-4c0e65', 'tx-white'],
            iconRemove: ['bg-h-84aa52', 'tx-black'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        }
    };
      
    // Toggle Pink Theme
    const togglePink = () => {
        const body = document.body;
        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-pink', {
            iconAdd: ['bg-h-43091d', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-pink'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-blue-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-blue-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-blue-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-5290aa'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-blue-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-blue-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-blue-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-2b650e'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-green-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-green-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-green-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-84aa52'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-green-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-green-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-green-light']
          });
        }
    };

    // Toggle Blue Theme
    const toggleBlue = () => {
        const body = document.body;

        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-blue', {
            iconAdd: ['bg-h-03131d', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-blue', {
            iconAdd: ['bg-h-5290aa', 'tx-white'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-8d52aa'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-2b650e'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-green-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-green-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-green-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-84aa52'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-green-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-green-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-green-light']
          });
        }
    };

    // Toggle Green Theme
    const toggleGreen = () => {
        const body = document.body;

        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-green', {
            iconAdd: ['bg-h-2b650e', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-green', {
            iconAdd: ['bg-h-84aa52', 'tx-white'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-blue-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-blue-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-blue-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-5290aa'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-blue-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-blue-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-blue-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-8d52aa'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        }
    };

    // Toggle Dark Theme
    const toggleDark = () => {
        const body = document.body;
        if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark', {
          iconAdd: ['bg-white', 'tx-black'],  
          iconRemove: ['bg-h-8d52aa', 'tx-white'],  
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light', {
            iconAdd: ['bg-black'], 
            iconRemove: ['bg-h-4c0e65'],  
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark', {
            iconAdd:  ['bg-white', 'tx-black'],
            iconRemove: ['bg-h-43091d', 'tx-white'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light', {
            iconAdd: ['bg-black'],
            iconRemove: ['bg-black']['bg-h-aa5275'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark', {
          iconAdd: ['bg-white', 'tx-black'] ,
            iconRemove: ['bg-h-03131d', 'tx-white'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light', {
            iconAdd: ['bg-black', 'tx-white'],
            iconRemove: ['bg-h-5290aa', 'tx-black'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark', {
            iconAdd: ['bg-white', 'tx-black'],
            iconRemove: ['bg-h-2b650e', 'tx-white'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light', {
            iconAdd: ['bg-black', 'tx-white'],
            iconRemove: ['bg-h-4c0e65', 'tx-black'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-light']
          });
        }
    };
  

    // Initialize the page with the saved theme on load
    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
      document.addEventListener('DOMContentLoaded', () => {
        savedTheme(); 
      });
    }


    
</script>
<html>
  <html-head />
  <body class="dark bg-t-0 tx-t-1 tx-arial">
    <panel-layout>
      <header><html-header /></header>
      <aside left><html-aside /></aside>
      <aside right>
        <menu class="m-0 px-10 py-20 h-calc-full-40 bg-t-2 scroll-auto">
          <h6 class="tx-muted tx-14 mb-0 mt-0 pb-10 tx-upper">
            {_('On this page')}
          </h6>
          <nav class="tx-14 tx-lh-32">
            <a class="block tx-t-0" href="#props">{_('Props')}</a>
            <a class="block tx-t-0" href="#signals">{_('Signals')}</a>
            <a class="block tx-t-0" href="#events">{_('Events')}</a>
            <a class="block tx-t-0" href="#classnames">{_('Class Names')}</a>
            <a class="block tx-t-0" href="#children">{_('Children')}</a>
            <a class="block tx-t-0" href="#component">{_('Component')}</a>
            <a class="block tx-t-0" href="#env">{_('Env Variables')}</a>
            <a class="block tx-t-0" href="#this">{_('this')}</a>
          </nav>
        </menu>
      </aside>
      <main>
        <api-docs>
          <h1 class="tx-primary tx-upper tx-30 py-20">
            {_('State Management')}
          </h1>
          <i18n-translate p trim class="tx-lh-36 py-20">
            Temple provides several ways to manage properties and states 
            in your components.
          </i18n-translate>

          <a name="props"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('Props')}
          </h2>

          <ide-code lang="js" trim detab={12}>{`
            import { props } from '@ossph/temple';
            const { title, description } = props();
          `}</ide-code>

          <i18n-translate p trim class="tx-lh-36 py-20">
            The <code>props</code> function can be used to access the 
            properties of a component.
          </i18n-translate>

          <a name="signals"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('Signals')}
          </h2>

          <i18n-translate p trim class="tx-lh-36 py-20">
            Temple provides a reactive state management system that allows 
            you to manage states in your components. The system is based 
            on signals, which are reactive variables that can be used to 
            store and update data. Signals can be used to store any type 
            of data, including numbers, strings, objects, arrays, and even 
            functions.
          </i18n-translate>

          <div class="scroll-auto bg-black">
            <ide-code trim detab={14}>{`
              <script>
                import { signal } from '@ossph/temple';
                const count = signal<number>(1);
              </script>
              <em class=classlist>Count #{count.value}</em>
            `}</ide-code>
          </div>

          <i18n-translate p trim class="tx-lh-36 py-20">
            To create a signal, you can use the 
            <ide-code type="javascript" inline>{`signal()`}</ide-code> 
            function, which takes an initial value as an argument. Signals 
            can be read and updated using the <code>value</code> property. 
            Setting the value will trigger a re-render of the component.
          </i18n-translate>

          <i18n-translate p trim class="tx-lh-36 py-20">
            Signals can be used in your components to manage states and 
            trigger updates when the state changes. You can use signals to 
            store data that needs to be shared between components, or to 
            trigger side effects when the state changes. Signals can also 
            be used to store data that needs to be persisted across page 
            reloads, such as form data or user preferences.
          </i18n-translate>

          <a name="events"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('Events')}
          </h2>

          <div class="scroll-auto bg-black">
            <ide-code trim number detab={14}>{`
              <script>
                import { signal } from '@ossph/temple';
                const count = signal<number>(1);
                const add = e => count.value++;
              </script>

              <button click=add>{count.value}</button>

              <button dblclick=add>{count.value}</button>
              <button mousedown=add>{count.value}</button>
              <button mouseup=add>{count.value}</button>
              <button mousemove=add>{count.value}</button>
              <button mouseover=add>{count.value}</button>
              <button mouseout=add>{count.value}</button>
              <button wheel=add>{count.value}</button>
              <button keydown=add>{count.value}</button>
              <button keypress=add>{count.value}</button>
              <button keyup=add>{count.value}</button>
            `}</ide-code>
          </div>

          <i18n-translate p trim class="tx-lh-36 py-20">
            For example, you can use the <ide-code inline>click</ide-code> 
            attribute assigned to a function to trigger a function when 
            the element is clicked. In combination with updating a signal, 
            can trigger a re-render of the component. The following event 
            attributes are supported.
          </i18n-translate>

          <div class="col-2">
            <div>
              <h3>{_('Mouse Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>click</ide-code></li>
                <li><ide-code inline>dblclick</ide-code></li>
                <li><ide-code inline>mousedown</ide-code></li>
                <li><ide-code inline>mouseup</ide-code></li>
                <li><ide-code inline>mousemove</ide-code></li>
                <li><ide-code inline>mouseover</ide-code></li>
                <li><ide-code inline>mouseout</ide-code></li>
                <li><ide-code inline>wheel</ide-code></li>
              </ul>
              <h3>{_('Keyboard Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>keydown</ide-code></li>
                <li><ide-code inline>keypress</ide-code></li>
                <li><ide-code inline>keyup</ide-code></li>
              </ul>
              <h3>{_('Form Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>blur</ide-code></li>
                <li><ide-code inline>change</ide-code></li>
                <li><ide-code inline>contextmenu</ide-code></li>
                <li><ide-code inline>focus</ide-code></li>
                <li><ide-code inline>input</ide-code></li>
                <li><ide-code inline>submit</ide-code></li>
                <li><ide-code inline>invalid</ide-code></li>
                <li><ide-code inline>reset</ide-code></li>
                <li><ide-code inline>search</ide-code></li>
                <li><ide-code inline>select</ide-code></li>
              </ul>
              <h3>{_('Clipboard Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>copy</ide-code></li>
                <li><ide-code inline>cut</ide-code></li>
                <li><ide-code inline>paste</ide-code></li>
              </ul>
              <h3>{_('Transition Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>transitionend</ide-code></li>
              </ul>
            </div>
            <div>
              <h3>{_('Drag Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>drag</ide-code></li>
                <li><ide-code inline>dragstart</ide-code></li>
                <li><ide-code inline>dragend</ide-code></li>
                <li><ide-code inline>dragover</ide-code></li>
                <li><ide-code inline>dragenter</ide-code></li>
                <li><ide-code inline>dragleave</ide-code></li>
                <li><ide-code inline>drop</ide-code></li>
                <li><ide-code inline>scroll</ide-code></li>
              </ul>
              <h3>{_('Media Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>durationchange</ide-code></li>
                <li><ide-code inline>ended</ide-code></li>
                <li><ide-code inline>error</ide-code></li>
                <li><ide-code inline>loadeddata</ide-code></li>
                <li><ide-code inline>loadedmetadata</ide-code></li>
                <li><ide-code inline>loadstart</ide-code></li>
                <li><ide-code inline>pause</ide-code></li>
                <li><ide-code inline>play</ide-code></li>
                <li><ide-code inline>playing</ide-code></li>
                <li><ide-code inline>progress</ide-code></li>
                <li><ide-code inline>ratechange</ide-code></li>
                <li><ide-code inline>seeked</ide-code></li>
                <li><ide-code inline>seeking</ide-code></li>
                <li><ide-code inline>stalled</ide-code></li>
                <li><ide-code inline>suspend</ide-code></li>
                <li><ide-code inline>timeupdate</ide-code></li>
                <li><ide-code inline>volumechange</ide-code></li>
                <li><ide-code inline>waiting</ide-code></li>
              </ul>
              <h3>{_('Animation Events')}</h3>
              <ul class="tx-lh-36">
                <li><ide-code inline>animationstart</ide-code></li>
                <li><ide-code inline>animationend</ide-code></li>
                <li><ide-code inline>animationiteration</ide-code></li>
              </ul>
            </div>
          </div>

          <a name="classnames"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('Class Names')}
          </h2>

          <div class="scroll-auto bg-black">
            <ide-code lang="js" trim detab={14}>{`
              import { classnames } from '@ossph/temple';
              const classlist = classnames(); //--> 'class1 class2 class3'
            `}</ide-code>
          </div>

          <i18n-translate p trim class="tx-lh-36 py-20">
            The <code>classnames</code> function can be used to generate 
            a list of class names based on the properties of an object.
          </i18n-translate>

          <a name="children"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('Children')}
          </h2>

          <div class="scroll-auto bg-black">
            <ide-code lang="js" trim detab={14}>{`
              import { children } from '@ossph/temple';
              const childlist = children(); //--> Node[]
            `}</ide-code>
          </div>
          <i18n-translate p trim class="tx-lh-36 py-20">
            The <code>children</code> function can be used to render 
            child components in a parent component.
          </i18n-translate>

          <a name="component"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('Component')}
          </h2>

          <div class="scroll-auto bg-black">
            <ide-code lang="js" trim detab={14}>{`
              import { component } from '@ossph/temple';
              const button = component(); //--> HTMLElement
              console.log(button.querySelector('span'));
            `}</ide-code>
          </div>
          <i18n-translate p trim class="tx-lh-36 py-20">
            For other edge cases, the <code>component</code> function 
            can be used to get raw access to the component's 
            functionality.
          </i18n-translate>

          <a name="env"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('Environment Variables')}
          </h2>

          <ide-code trim detab={12}>{`
            <script>
              import { env } from '@ossph/temple';
              const { BUILD_ID, NODE_ENV } = env();
            </script>
            <if true={NODE_ENV === 'development'}>
              <p>Development mode</p>
            </if>
          `}</ide-code>
          <i18n-translate p trim class="tx-lh-36 py-20">
            The <code>env</code> function can be used to access environment 
            variables in a component.
          </i18n-translate>

          <a name="this"></a>
          <h2 class="tx-primary tx-upper tx-26 pt-40 pb-10 mb-20 b-solid b-t-1 bb-1 bt-0 bx-0">
            {_('this')}
          </h2>

          <ide-app title="What's this" class="py-20">
            <ide-code numbers detab={14}>{`
              <script>
                this.props;
                this.style;
                this.classList;
                this.parentNode;
                this.innerHTML;
                this.appendChild();
                this.querySelector('p');
              </script>
            `}</ide-code>
          </ide-app>

          <i18n-translate p trim class="tx-lh-36 py-20">
            <ide-code inline>this</ide-code> refers to the 
            <ide-code inline>TempleComponent</ide-code> that extends 
            <ide-code inline>HTMLElement</ide-code>. This means all
            components in Temple are in fact are HTML elements and has
            access to the common functionality like 
            <ide-code inline>innerHTML</ide-code> and
            <ide-code inline>{`querySelector()`}</ide-code> to name a 
            few. <ide-code inline>TempleComponent</ide-code> has the
            additional following properties and methods that you can access
            using <ide-code inline>this</ide-code>.
          </i18n-translate>

          <api-ui start="TempleComponent" />

          <element-alert curved info class="py-20 tx-lh-24">
            <element-icon name="info-circle" />
            <strong>Info:</strong> You can discover more methods and properties
            of the <code>HTMLElement</code> class on the
            <a 
              target="_blank"
              class="tx-white tx-underline"
              href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
            >
              MDN Web Docs
            </a>.
          </element-alert>

          <nav class="flex">
            <a class="tx-primary py-40" href="/temple/docs/markup-syntax.html">
              <element-icon name="chevron-left" theme="tx-1" />
              {_('Markup Syntax')}
            </a>
            <a class="flex-grow tx-right tx-primary py-40" href="/temple/docs/component-strategy.html">
              {_('Component Strategy')}
              <element-icon name="chevron-right" theme="tx-1" />
            </a>
          </nav>
          <footer class="foot"></footer>
        </api-docs>
      </main>
    </panel-layout>
  </body>
</html>