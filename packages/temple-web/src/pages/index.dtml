<link rel="import" type="template" href="@/components/html/head.tml" name="html-head" />
<link rel="import" type="template" href="@/components/html/header.tml" name="html-header" />
<link rel="import" type="component" href="@ossph/temple-ui/layout/panel.tml" name="panel-layout" />
<link rel="import" type="component" href="@ossph/temple-ui/form/button.tml" name="element-button" />
<link rel="import" type="component" href="@/components/ide/app.tml" name="ide-app" />
<link rel="import" type="component" href="@/components/ide/code.tml" name="ide-code" />
<link rel="import" type="component" href="@/components/ide/preview.tml" name="ide-preview" />
<link rel="import" type="component" href="@/components/i18n/translate.tml" name="i18n-translate" />
<link rel="import" type="component" href="@/components/tweet-box.tml" />
<style>
  @temple theme;
  @temple reset;
  @temple fouc-opacity;
  @temple utilities;
</style>
<script>
  import { env } from '@ossph/temple';
  import { _ } from '@/components/i18n';

  const url = '/temple/index.html';
  const title = _('Temple - The reactive web component template engine.');
  const description = _('Temple is a template engine that generates web components and support reactivity.');

    // Configuration for Theme 
    const themeMap = {
        // Light Theme
        dark: { nextTheme: 'light', options: { iconAdd: ['fa-moon', 'bg-black', 'tx-white'], iconRemove: ['fa-sun', 'bg-white', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: ['tx-white'], terminalRemove: ['tx-black'] }},
        // Light-Violet Theme
        'dark-violet': { nextTheme: 'light-violet', options: { iconAdd: ['fa-moon', 'bg-h-8d52aa', 'tx-white'], iconRemove: ['fa-sun', 'bg-white', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Violet Theme
        'light-violet': { nextTheme: 'dark-violet', options: { iconAdd: ['fa-sun', 'bg-h-4c0e65', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-8d52aa'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Pink Theme
        'dark-pink': { nextTheme: 'light-pink', options: { iconAdd: ['fa-moon', 'bg-h-aa5275', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-43091d', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Pink Theme
        'light-pink': { nextTheme: 'dark-pink', options: { iconAdd: ['fa-sun', 'bg-h-43091d', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-aa5275'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Blue Theme
        'dark-blue': { nextTheme: 'light-blue', options: { iconAdd: ['fa-moon', 'bg-h-5290aa', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-03131d', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Blue Theme
        'light-blue': { nextTheme: 'dark-blue', options: { iconAdd: ['fa-sun', 'bg-h-03131d', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-5290aa'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Light-Green Theme
        'dark-green': { nextTheme: 'light-green', options: { iconAdd: ['fa-moon', 'bg-h-84aa52', 'tx-white'], iconRemove: ['fa-sun', 'bg-h-2b650e', 'tx-black'], linkAdd: ['tx-black'], linkRemove: ['tx-white'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: ['tx-black'], terminalAdd: [], terminalRemove: ['tx-white'] }},
        // Dark-Green The,e
        'light-green': { nextTheme: 'dark-green', options: { iconAdd: ['fa-sun', 'bg-h-2b650e', 'tx-black'], iconRemove: ['fa-moon', 'bg-h-84aa52'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-white'], tweetBoxRemove: [], terminalAdd: ['tx-white'], terminalRemove: [] }},
        // Dark Theme
        light: { nextTheme: 'dark', options: { iconAdd: ['fa-sun', 'bg-white', 'tx-black'], iconRemove: ['fa-moon', 'bg-black', 'tx-white'], linkAdd: ['tx-white'], linkRemove: ['tx-black'], tweetBoxAdd: ['tx-black'], tweetBoxRemove: ['tx-white'], terminalAdd: ['tx-black'], terminalRemove: ['tx-white'] }}
    };

    // Helper function to toggle classes
    const toggleClasses = (element, addClasses, removeClasses) => {
        if (element) {
          element.classList.add(...addClasses);
          element.classList.remove(...removeClasses);
        }
    };
        

    // Apply the saved theme from localStorage
    const savedTheme = () => {
        const savedTheme = localStorage.getItem('theme');
        const icon = document.getElementById('modeIcon');
        const tweetBoxes = document.querySelectorAll('tweet-box');
        const textLinks = document.querySelectorAll('a');
        const terminals = document.querySelectorAll('ide-code');

        
        if (savedTheme) {
          // Reset all theme classes on the body
          const themeClasses = [
            'dark', 'light', 
            'dark-violet', 'light-violet', 'dark-pink', 'light-pink', 
            'dark-blue', 'light-blue', 'dark-green', 'light-green'
          ];
          themeClasses.forEach(themeClass => document.body.classList.remove(themeClass));
          // Apply the saved theme to the body
          document.body.classList.add(savedTheme);

          // Apply classes based on the saved theme
          if (savedTheme === 'dark-violet') {
            toggleClasses(icon, ['bg-h-8d52aa', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-violet') {
            toggleClasses(icon, ['fa-moon', 'bg-h-4c0e65', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-pink') { 
            toggleClasses(icon, ['bg-h-43091d', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-pink') {
            toggleClasses(icon, ['fa-moon', 'bg-h-aa5275', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-blue') { 
            toggleClasses(icon, ['bg-h-03131d', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-blue') {
            toggleClasses(icon, ['fa-moon', 'bg-h-5290aa', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'dark-green') { 
            toggleClasses(icon, ['bg-h-2b650e', 'tx-white'], ['bg-white', 'tx-black']);
          } else if (savedTheme === 'light-green') {
            toggleClasses(icon, ['fa-moon', 'bg-h-84aa52', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          } else if (savedTheme === 'light') {
            toggleClasses(icon, ['fa-moon', 'bg-black', 'tx-white'], ['fa-sun', 'bg-white', 'tx-black']);
            tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox,  ['tx-white'], ['tx-black']));
            textLinks.forEach(link => toggleClasses(link, ['tx-black'], ['tx-white']));
            terminals.forEach(terminal => toggleClasses(terminal, ['tx-white'], ['tx-black']));
          }
        }
    };


    // General function to toggle theme modes
    const toggleTheme = (fromClass, toClass, iconConfig) => {
        const body = document.body;
        const icon = document.getElementById('modeIcon');
        const textA = document.querySelectorAll('a');
        const tweetBoxes = document.querySelectorAll('tweet-box');
        const terminals = document.querySelectorAll('ide-code');

        body.classList.replace(fromClass, toClass);
        textA.forEach(link => toggleClasses(link, iconConfig.linkAdd, iconConfig.linkRemove));
        tweetBoxes.forEach(tweetBox => toggleClasses(tweetBox, iconConfig.tweetBoxAdd, iconConfig.tweetBoxRemove));
        terminals.forEach(terminal => toggleClasses(terminal, iconConfig.terminalAdd, iconConfig.terminalRemove));
        toggleClasses(icon, iconConfig.iconAdd, iconConfig.iconRemove);
        localStorage.setItem('theme', toClass);
    };


    // Toggle Mode for Dark and Light Mode
    const toggleMode = () => {
        const body = document.body;
        const currentTheme = Object.keys(themeMap).find(theme => body.classList.contains(theme));
        if (currentTheme) {
          const { nextTheme, options } = themeMap[currentTheme];
          toggleTheme(currentTheme, nextTheme, options);
        }
    };


    // Toggle Violet Theme
    const toggleViolet = () => {
        const body = document.body;
        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa', 'tx-white'],  
            iconRemove: ['bg-white', 'tx-black'],  
            linkAdd: ['tx-white'],
            linkRemove: ['tx-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],  
            iconRemove: ['bg-black'],
            linkAdd: ['tx-black'],
            linkRemove: ['text-white'],
            tweetBoxAdd: ['tx-white'],
            tweetBoxRemove: ['tx-black'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-violet'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-violet', {
            iconAdd: ['bg-h-4c0e65'],
            iconRemove:  ['bg-h-5290aa'],
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-violet', {
            iconAdd: ['bg-h-8d52aa', 'tx-white'],
            iconRemove: ['bg-h-2b650e', 'tx-black'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-violet', {
            iconAdd: ['bg-h-4c0e65', 'tx-white'],
            iconRemove: ['bg-h-84aa52', 'tx-black'],
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        }
    };
      
    // Toggle Pink Theme
    const togglePink = () => {
        const body = document.body;
        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-pink', {
            iconAdd: ['bg-h-43091d', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-pink'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-blue-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-blue-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-blue-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-5290aa'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-blue-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-blue-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-blue-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-pink', {
            iconAdd: ['bg-h-43091d'],
            iconRemove: ['bg-h-2b650e'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-green-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-green-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-green-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-pink', {
            iconAdd: ['bg-h-aa5275'],
            iconRemove: ['bg-h-84aa52'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-green-light'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-green-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-green-light']
          });
        }
    };

    // Toggle Blue Theme
    const toggleBlue = () => {
        const body = document.body;

        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-blue', {
            iconAdd: ['bg-h-03131d', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-blue', {
            iconAdd: ['bg-h-5290aa', 'tx-white'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-8d52aa'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark-blue', {
            iconAdd: ['bg-h-03131d'],
            iconRemove: ['bg-h-2b650e'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-green-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-green-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-green-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light-blue', {
            iconAdd: ['bg-h-5290aa'],
            iconRemove: ['bg-h-84aa52'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-green-light'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-green-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-green-light']
          });
        }
    };

    // Toggle Green Theme
    const toggleGreen = () => {
        const body = document.body;

        if (body.classList.contains('dark')) {
          toggleTheme('dark', 'dark-green', {
            iconAdd: ['bg-h-2b650e', 'tx-white'],
            iconRemove: ['bg-white', 'tx-black'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light')) {
          toggleTheme('light', 'light-green', {
            iconAdd: ['bg-h-84aa52', 'tx-white'],
            iconRemove: ['bg-black'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-03131d'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-blue-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-blue-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-blue-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-5290aa'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-blue-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-blue-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-blue-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-43091d'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-pink-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-pink-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-pink-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-aa5275'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-pink-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-pink-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-pink-light']
          });
        } else if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark-green', {
            iconAdd: ['bg-h-2b650e'],
            iconRemove: ['bg-h-8d52aa'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-violet-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-violet-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-violet-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light-green', {
            iconAdd: ['bg-h-84aa52'],
            iconRemove: ['bg-h-4c0e65'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-violet-light'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-violet-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-violet-light']
          });
        }
    };

    // Toggle Dark Theme
    const toggleDark = () => {
        const body = document.body;
        if (body.classList.contains('dark-violet')) {
          toggleTheme('dark-violet', 'dark', {
          iconAdd: ['bg-white', 'tx-black'],  
          iconRemove: ['bg-h-8d52aa', 'tx-white'],  
            linkAdd: ['text-violet-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-violet-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-violet')) {
          toggleTheme('light-violet', 'light', {
            iconAdd: ['bg-black'], 
            iconRemove: ['bg-h-4c0e65'],  
            linkAdd: ['text-violet-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-violet-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-violet-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-pink')) {
          toggleTheme('dark-pink', 'dark', {
            iconAdd:  ['bg-white', 'tx-black'],
            iconRemove: ['bg-h-43091d', 'tx-white'],
            linkAdd: ['text-pink-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-pink-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-pink')) {
          toggleTheme('light-pink', 'light', {
            iconAdd: ['bg-black'],
            iconRemove: ['bg-black']['bg-h-aa5275'],
            linkAdd: ['text-pink-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-pink-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-pink-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-blue')) {
          toggleTheme('dark-blue', 'dark', {
          iconAdd: ['bg-white', 'tx-black'] ,
            iconRemove: ['bg-h-03131d', 'tx-white'],
            linkAdd: ['text-blue-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-blue-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-blue')) {
          toggleTheme('light-blue', 'light', {
            iconAdd: ['bg-black', 'tx-white'],
            iconRemove: ['bg-h-5290aa', 'tx-black'],
            linkAdd: ['text-blue-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-blue-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-blue-light'],
            terminalRemove: ['bg-terminal-light']
          });
        } else if (body.classList.contains('dark-green')) {
          toggleTheme('dark-green', 'dark', {
            iconAdd: ['bg-white', 'tx-black'],
            iconRemove: ['bg-h-2b650e', 'tx-white'],
            linkAdd: ['text-green-dark'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-dark'],
            tweetBoxRemove: ['bg-dark'],
            terminalAdd: ['bg-terminal-green-dark'],
            terminalRemove: ['bg-terminal-dark']
          });
        } else if (body.classList.contains('light-green')) {
          toggleTheme('light-green', 'light', {
            iconAdd: ['bg-black', 'tx-white'],
            iconRemove: ['bg-h-4c0e65', 'tx-black'],
            linkAdd: ['text-green-light'],
            linkRemove: ['text-dark'],
            tweetBoxAdd: ['bg-green-light'],
            tweetBoxRemove: ['bg-light'],
            terminalAdd: ['bg-terminal-green-light'],
            terminalRemove: ['bg-terminal-light']
          });
        }
    };
  

    // Initialize the page with the saved theme on load
    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
      document.addEventListener('DOMContentLoaded', () => {
        savedTheme(); 
      });
    }


    
</script>
<html>
  <html-head />
  <body class="dark bg-t-0 tx-t-1 tx-arial">
    <panel-layout>
      <header><html-header /></header>
      <main class="scroll-auto">
        <section class="bg-t-1 py-40 tx-center w-full">
          <img class="h-100" src="/temple/temple-icon.png" alt="Temple Logo" />
          <h1 class="tx-40">{_('Temple')}</h1>
          <i18n-translate p trim class="tx-30 py-30 tx-lh-36">
            The reactive web component template engine.
          </i18n-translate>
          <element-button 
            primary xl rounded 
            class="mr-10" 
            href="/temple/docs/getting-started.html"
          >
            {_('Get Started')}
          </element-button>
          <element-button 
            secondary xl rounded 
            class="inline-block"
            href="/temple/docs/index.html"
          >
            {_('Read the Docs')}
          </element-button>
        </section>
        <section class="m-auto mw-960 px-20">
          <i18n-translate p trim class="p-20 tx-center tx-lh-36 tx-18">
            Temple is a modern HTML markup language and a server first 
            template engine with a built-in parser/compiler that 
            generates web components and supports reactivity.
          </i18n-translate>
          <ide-app class="block" title="Basic Example">
            <div class="flex bg-white md-block">
              <ide-code numbers trim detab={16} class="basis-half">{`
                <style>
                  h1 { font-weight: bold; }
                </style>
                <script>
                  const name = 'world';
                </script>
                <h1>Hello {name}!</h1>
              `}</ide-code>
              <ide-preview class="basis-half">
                <div>
                  <h1>{_('Hello world!')}</h1>
                </div>
              </ide-preview>
            </div>
          </ide-app>
        </section>
        <section class="bg-t-1 m-auto py-40 px-20 tx-center">
          <ul class="flex flex-center list-none p-0 tx-center md-block">
            <li class="w-third mw-300 md-mw-400 md-w-auto md-m-auto">
              <div class="p-10">
                <h3 class="mb-20 tx-upper">
                  {_('Expressive Markup')}
                </h3>
                <i18n-translate p trim class="tx-16 tx-lh-24">
                  Any data type as attributes. Easily express logic with 
                  markup directives like if, each, and try catch. 
                </i18n-translate>
              </div>
            </li>
            <li class="w-third mw-300 md-mw-400 md-w-auto md-m-auto md-mt-20">
              <div class="p-10">
                <h3 class="mb-20 tx-upper">
                  {_('Reactive Signals')}
                </h3>
                <i18n-translate p trim class="tx-16 tx-lh-24">
                  Easily transition from backend logic to reactive states.
                  No Hydration and no memoization needed.
                </i18n-translate>
              </div>
            </li>
            <li class="w-third mw-300 md-mw-400 md-w-auto md-m-auto md-mt-20">
              <div class="p-10">
                <h3 class="mb-20 tx-upper">
                  {_('Bare Metal')}
                </h3>
                <i18n-translate p trim class="tx-16 tx-lh-24">
                  Work with the DOM directly. Import any web components 
                  from any source. Works with Lit, HTMX.
                </i18n-translate>
              </div>
            </li>
          </ul>
        </section>
        <section class="m-auto mw-960 px-20 py-40">
          <h3 class="mt-40 mb-20 tx-center tx-upper">
            {_('Server Setup')}
          </h3>
          <i18n-translate p trim class="tx-center tx-lh-24 mb-20">
            Temple can be used with popular server 
            frameworks in just a few lines of code.
          </i18n-translate>
          <ide-app title="Server Example">
            <ide-code lang="js" numbers trim detab={14}>{`
              import temple from '@ossph/temple/compiler';
              //make a temple compiler
              const compiler = temple();
              //render HTML
              const results = compiler.render('./page.dtml');
            `}</ide-code>
          </ide-app>

          <h3 class="mt-40 mb-20 tx-center tx-upper">
            {_('Props')}
          </h3>
          <i18n-translate p trim class="tx-center tx-lh-24 mb-20">
            Import your component props and use immediately
          </i18n-translate>
          <ide-app title="Props Example">
            <div class="flex bg-white md-block">
              <ide-code numbers trim detab={16} class="basis-half">{`
                <style>
                  h1 { font-weight: bold; }
                </style>
                <script>
                  import { props } from '@ossph/temple';
                  const { name } = props();
                </script>
                <h1>Hello {name}!</h1>
              `}</ide-code>
              <ide-preview class="basis-half">
                <div>
                  <h1>{_('Hello world!')}</h1>
                </div>
              </ide-preview>
            </div>
          </ide-app>

          <h3 class="mt-40 mb-20 tx-center tx-upper">
            {_('Reactive Signals')}
          </h3>
          <i18n-translate p trim class="tx-center tx-lh-24 mb-20">
            Use signals to manage state changes and re-renders.
          </i18n-translate>
          <ide-app title="Signal Example">
            <div class="flex bg-white md-block">
              <ide-code numbers trim detab={16} class="basis-half">{`
                <style>
                  h1 { font-weight: bold; }
                </style>
                <script>
                  import { signal } from '@ossph/temple';
                  const name = signal('world');
                  name.value += '!';
                </script>
                <h1>Hello {name.value}</h1>
              `}</ide-code>
              <ide-preview class="basis-half">
                <div>
                  <h1>{_('Hello world!')}</h1>
                </div>
              </ide-preview>
            </div>
          </ide-app>

          <h3 class="mt-40 mb-20 tx-center tx-upper">
            {_('Components and Templates')}
          </h3>
          <i18n-translate p trim class="tx-center tx-lh-24 mb-20">
            Import components and templates for reusability.
          </i18n-translate>
          <ide-app title="Import Example">
            <div class="flex bg-white md-block">
              <ide-code numbers trim detab={16} class="basis-half">{`
                <!-- page.html -->
                <link rel="import" href="./my-heading.html" />
                <script>
                  const name = 'world';
                </script>
                <my-heading {name}>Hello</my-heading>
              `}</ide-code>
              <ide-code class="basis-half b-t-1 b-solid by-0 bl-1 br-0 md-b-0" trim detab={16}>{`
                <!-- my-heading.html -->
                <script>
                  import { props } from '@ossph/temple';
                  const { name, children } = props();
                </script>
                <h1>{children} {name}</h1>
              `}</ide-code>
            </div>
          </ide-app>

          <h3 class="mt-40 mb-20 tx-center tx-upper">
            {_('Conditionals and Iterations')}
          </h3>
          <i18n-translate p trim class="tx-center tx-lh-24 mb-20">
            Case for conditions and iterations in an expressive way.
          </i18n-translate>
          <ide-app title="Conditional + Iteration Example">
            <div class="flex bg-white md-block">
              <ide-code numbers trim detab={16} class="basis-half">{`
                <script>
                  const name = 'world';
                  const show = name === "world";
                </script>

                <if true=show>
                  <h1>Hello {name}</h1>
                </if>
              `}</ide-code>
              <ide-code class="basis-half b-t-1 b-solid by-0 bl-1 br-0 md-b-0" trim detab={16}>{`
                <script>
                  const list = [ 'a', 'b', 'c' ];
                </script>
                <ul>
                  <each key=i value=item from=list>
                    <li>{i}: {item}</li>
                  </each>
                </ul>
              `}</ide-code>
            </div>
          </ide-app>
        </section>
        <section class="m-auto px-20 py-40 tx-center bg-h-cccccc">
          <h3 class="tx-h-242424 tx-30 tx-upper">
            {_('Works With Popular Server Frameworks')}
          </h3>
          <div class="flex flex-center flex-wrap mx-auto mt-40 mb-0 sm-block">
            <a class="block basis-third mb-20" href="https://expressjs.com/" target="_blank">
              <img class="h-60" src="https://upload.wikimedia.org/wikipedia/commons/6/64/Expressjs.png" alt="Express" />
            </a>
            <a class="block basis-third mb-20" href="https://fastify.dev/" target="_blank">
              <img class="h-60" src="https://upload.wikimedia.org/wikipedia/commons/0/0a/Fastify_logo.svg" alt="Fastify" />
            </a>
            <a class="block basis-third mb-20" href="https://hapi.dev/" target="_blank">
              <img class="h-60" src="https://raw.githubusercontent.com/hapijs/assets/master/images/hapi.png" alt="Hapi" />
            </a>
            <a class="block basis-third mb-20" href="https://koajs.com/" target="_blank">
              <img class="h-60" src="https://cdn.icon-icons.com/icons2/2699/PNG/512/koajs_logo_icon_168379.png" alt="Koa" />
            </a>
            <a class="block basis-third mb-20" href="https://nestjs.com/" target="_blank">
              <img class="h-60" src="https://cdn.icon-icons.com/icons2/2699/PNG/512/nestjs_logo_icon_169927.png" alt="NestJS" />
            </a>
            <a class="block basis-third mb-20" href="http://restify.com/" target="_blank">
              <img class="h-60" src="https://raw.githubusercontent.com/restify/node-restify/gh-images/logo/png/restify_logo_black_transp_288x288.png?raw=true" alt="Restify" />
            </a>
          </div>
        </section>
        <section class="bg-t-1 m-auto py-40 px-20">
          <h3 class="tx-26 tx-center">
            {_('Temple Loves Developers!')}
          </h3>
          <section class="flex flex-wrap md-block">
            <tweet-box class="block basis-third lg-basis-half" name="Joff Tiquez" handle="@jrtiquez" href="https://twitter.com/jrtiquez" src="https://github.com/jofftiquez.png">
              <p>Im a vue developer. No need for this. OSSPH does not support this project.</p>
            </tweet-box>
            <tweet-box class="block basis-third lg-basis-half" name="Primeagen" handle="@theprimeagen" href="https://twitter.com/ThePrimeagen" src="https://pbs.twimg.com/profile_images/1759330620160049152/2i_wkOoK_400x400.jpg">
              <p>Temple? Never heard of it...<br />"The Name..."</p>
            </tweet-box>
            <tweet-box class="block basis-third lg-basis-half" name="Kristian Quirapas" handle="@YourCompanyCTO" href="https://twitter.com/YourCompanyCTO" src="https://avatars.githubusercontent.com/u/85150796?v=4">
              <p>Temple is good news for Node developers. I'm a rust developer so it don't matter to me.</p>
            </tweet-box>
            <tweet-box class="block basis-third lg-basis-half" name="Drizzle Team" handle="@drizzle.team" href="https://twitter.com/DrizzleORM" src="https://pbs.twimg.com/profile_images/1767809210060877824/mAtEmNk0_400x400.jpg">
              <p>Temple copied this section from us. We are the original.</p>
            </tweet-box>
            <tweet-box class="block basis-third lg-basis-half" name="Chris B" handle="@cblanquera" href="https://twitter.com/cblanquera" src="https://avatars.githubusercontent.com/u/120378?v=4">
              <p>After creating the Temple project, I am really excited to get back to ReactJS.</p>
            </tweet-box>
            <tweet-box class="block basis-third lg-basis-half" name="Theo" handle="@t3dotgg" href="https://twitter.com/t3dotgg" src="https://yt3.googleusercontent.com/4NapxEtLcHQ6wN2zA_DMmkOk47RFb_gy6sjSmUZGg_ARHjlIUjFsrNFddrcKMkTYpBNxCp3J=s160-c-k-c0x00ffffff-no-rj">
              <p>Temple? no thanks. Keep your stack front end. App router for life.</p>
            </tweet-box>
          </section>
        </section>
        <section class="m-auto py-40 px-20 tx-center">
          <h3 class="tx-26 mb-20">
            {_('What are you waiting for?')}
          </h3>
          <element-button 
            primary xl rounded 
            class="inline-block"
            style="margin-right:10px;" 
            href="/temple/docs/getting-started.html"
          >
            {_('Get Started')}
          </element-button>
          <element-button 
            secondary xl rounded 
            class="inline-block"
            href="/temple/docs/index.html"
          >
            {_('Read the Docs')}
          </element-button>
        </section>
      </main>
    </panel-layout>
  </body>
</html>